#include "../../include/EvoNDZ/input/input.h"
#include <unordered_map>
#include <GLFW/glfw3.h>

namespace evo::input
{
	std::unordered_map<Key, const char*> key_names {
#pragma region Keyboard
		{ Key::Space,		"Space" },
		{ Key::Apostrophe,	"'"		},
		{ Key::Comma,		","		},
		{ Key::Minus,		"-"		},
		{ Key::Period,		"."		},
		{ Key::Slash,		"/"		},

		{ Key::D0, "0" },
		{ Key::D1, "1" },
		{ Key::D2, "2" },
		{ Key::D3, "3" },
		{ Key::D4, "4" },
		{ Key::D5, "5" },
		{ Key::D6, "6" },
		{ Key::D7, "7" },
		{ Key::D8, "8" },
		{ Key::D9, "9" },

		{ Key::Semicolon,	";" },
		{ Key::Equal,		"=" },

		{ Key::A, "A" },
		{ Key::B, "B" },
		{ Key::C, "C" },
		{ Key::D, "D" },
		{ Key::E, "E" },
		{ Key::F, "F" },
		{ Key::G, "G" },
		{ Key::H, "H" },
		{ Key::I, "I" },
		{ Key::J, "J" },
		{ Key::K, "K" },
		{ Key::L, "L" },
		{ Key::M, "M" },
		{ Key::N, "N" },
		{ Key::O, "O" },
		{ Key::P, "P" },
		{ Key::Q, "Q" },
		{ Key::R, "R" },
		{ Key::S, "S" },
		{ Key::T, "T" },
		{ Key::U, "U" },
		{ Key::V, "V" },
		{ Key::W, "W" },
		{ Key::X, "X" },
		{ Key::Y, "Y" },
		{ Key::Z, "Z" },

		{ Key::LeftBracket,		"["			},
		{ Key::Backslash,		"\\"			},
		{ Key::RightBracket,		"]"			},
		{ Key::GraveAccent,		"`"			},
		{ Key::World1,			"W1"			},
		{ Key::World2,			"W2"			},
		{ Key::Escape,			"Esc"		},
		{ Key::Enter,			"Enter"		},
		{ Key::Tab,				"Tab"		},
		{ Key::Backspace,		"Backspace" },
		{ Key::Insert,			"Insert"		},
		{ Key::Delete,			"Delete"		},
		{ Key::Right,			"Right"		},
		{ Key::Left,				"Left"		},
		{ Key::Down,				"Down"		},
		{ Key::Up,				"Up"			},
		{ Key::PageUp,			"PageUp"		},
		{ Key::PageDown,		"PageDown"	},
		{ Key::Home,				"Home"		},
		{ Key::End,				"End"		},
		{ Key::CapsLock,		"CapsLock"	},
		{ Key::ScrollLock,		"ScrollLock" },
		{ Key::NumLock,			"NumLock"	},
		{ Key::PrintScreen,		"PrtScr"		},
		{ Key::Pause,			"Pause"		},

		{ Key::F1, "F1" },
		{ Key::F2, "F2" },
		{ Key::F3, "F3" },
		{ Key::F4, "F4" },
		{ Key::F5, "F5" },
		{ Key::F6, "F6" },
		{ Key::F7, "F7" },
		{ Key::F8, "F8" },
		{ Key::F9, "F9" },
		{ Key::F10, "F10" },
		{ Key::F11, "F11" },
		{ Key::F12, "F12" },
		{ Key::F13, "F13" },
		{ Key::F14, "F14" },
		{ Key::F15, "F15" },
		{ Key::F16, "F16" },
		{ Key::F17, "F17" },
		{ Key::F18, "F18" },
		{ Key::F19, "F19" },
		{ Key::F20, "F20" },
		{ Key::F21, "F21" },
		{ Key::F22, "F22" },
		{ Key::F23, "F23" },
		{ Key::F24, "F24" },
		{ Key::F25, "F25" },

		{ Key::Num0, "Num0" },
		{ Key::Num1, "Num" },
		{ Key::Num2, "Num2" },
		{ Key::Num3, "Num3" },
		{ Key::Num4, "Num4" },
		{ Key::Num5, "Num5" },
		{ Key::Num6, "Num6" },
		{ Key::Num7, "Num7" },
		{ Key::Num8, "Num8" },
		{ Key::Num9, "Num9" },

		{ Key::NumDecimal,	"Num."		},
		{ Key::NumDivide,	"Num/"		},
		{ Key::NumMultiply, "Num*"		},
		{ Key::NumSubtract, "Num-"		},
		{ Key::NumAdd,		"Num+"		},
		{ Key::NumEnter,		"NumEnter"	},
		{ Key::NumEqual,		"Num="		},

		{ Key::LeftShift,		"LShift"		},
		{ Key::LeftControl,		"LCtrl"		},
		{ Key::LeftAlt,			"LAlt"		},
		{ Key::LeftSuper,		"LSuper"		},
		{ Key::RightShift,		"RShift"		},
		{ Key::RightControl,		"RCtrl"		},
		{ Key::RightAlt,			"RAlt"		},
		{ Key::RightSuper,		"RSuper"		},

		{ Key::Menu, "Menu" },
#pragma endregion
#pragma region Mouse
		{ Key::Mouse1, "Mouse1" },
		{ Key::Mouse2, "Mouse2" },
		{ Key::Mouse3, "Mouse3" },
		{ Key::Mouse4, "Mouse4" },
		{ Key::Mouse5, "Mouse5" },
		{ Key::Mouse6, "Mouse6" },
		{ Key::Mouse7, "Mouse7" },
		{ Key::Mouse8, "Mouse8" },
#pragma endregion
#pragma region Joystick
		{ Key::J1, "J1" },
		{ Key::J2, "J2" },
		{ Key::J3, "J3" },
		{ Key::J4, "J4" },
		{ Key::J5, "J5" },
		{ Key::J6, "J6" },
		{ Key::J7, "J7" },
		{ Key::J8, "J8" },
		{ Key::J9, "J9" },
		{ Key::J10, "J10" },
		{ Key::J11, "J11" },
		{ Key::J12, "J12" },
		{ Key::J13, "J13" },
		{ Key::J14, "J14" },
		{ Key::J15, "J15" },
		{ Key::J16, "J16" },
		{ Key::J17, "J17" },
		{ Key::J18, "J18" },
		{ Key::J19, "J19" },
		{ Key::J20, "J20" },
		{ Key::J21, "J21" },
		{ Key::J22, "J22" },
		{ Key::J23, "J23" },
		{ Key::J24, "J24" },
		{ Key::J25, "J25" },
		{ Key::J26, "J26" },
		{ Key::J27, "J27" },
		{ Key::J28, "J28" },
		{ Key::J29, "J29" },
		{ Key::J30, "J30" },
		{ Key::J31, "J31" },
		{ Key::J32, "J32" },
#pragma endregion
	};

	const char* key_name(Key key) noexcept {
		auto it = key_names.find(key);
		if (it == key_names.end()) return "???";
		return it->second;
	}
}